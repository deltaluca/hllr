package ;


	enum HLR {
		h_tdecl ( tokens : Array<String> );
		h_extra ( haxe : String );
		h_entry ( entry : String );
		h_rules ( nt : String, rules : Array< { rule : Array<String>, haxe : String } > );
	}
	

class HLlr {
	public static var errors:Array<String>;

	public static function parse(input:Array<Terminal>):Dynamic {
		errors = new Array<String>();

		var _ = aE;
        var actions = [[_,_,_,aS(4),aS(6),_,_,_,aS(7),aS(9),aG(1),aG(3),_,_,_],[aA,_,_,aS(4),aS(6),_,_,_,aS(7),aS(9),_,aG(2),_,_,_],[aR(1),_,_,aR(1),aR(1),_,_,_,aR(1),aR(1),_,_,_,_,_],[aR(0),_,_,aR(0),aR(0),_,_,_,aR(0),aR(0),_,_,_,_,_],[_,_,aS(15),_,_,_,_,_,_,_,_,_,aG(5),_,_],[aR(2),_,aS(17),aR(2),aR(2),_,_,_,aR(2),aR(2),_,_,_,_,_],[aR(4),_,_,aR(4),aR(4),_,_,_,aR(4),aR(4),_,_,_,_,_],[_,_,aS(8),_,_,_,_,_,_,_,_,_,_,_,_],[aR(3),_,_,aR(3),aR(3),_,_,_,aR(3),aR(3),_,_,_,_,_],[_,_,aS(10),_,_,_,_,_,_,_,_,_,_,_,_],[_,_,_,_,_,aS(11),_,_,_,_,_,_,_,_,_],[_,_,aS(15),_,aS(20),_,aR(13),aR(13),_,_,_,_,aG(16),aG(12),aG(19)],[_,_,_,_,_,_,aS(14),aS(13),_,_,_,_,_,_,_],[aR(5),_,_,aR(5),aR(5),_,_,_,aR(5),aR(5),_,_,_,_,_],[_,_,aS(15),_,aS(20),_,aR(13),aR(13),_,_,_,_,aG(16),_,aG(18)],[aR(6),_,aR(6),aR(6),aR(6),_,aR(6),aR(6),aR(6),aR(6),_,_,_,_,_],[_,_,aS(17),_,aS(21),_,aR(10),aR(10),_,_,_,_,_,_,_],[aR(7),_,aR(7),aR(7),aR(7),_,aR(7),aR(7),aR(7),aR(7),_,_,_,_,_],[_,_,_,_,_,_,aR(9),aR(9),_,_,_,_,_,_,_],[_,_,_,_,_,_,aR(8),aR(8),_,_,_,_,_,_,_],[_,_,_,_,_,_,aR(12),aR(12),_,_,_,_,_,_,_],[_,_,_,_,_,_,aR(11),aR(11),_,_,_,_,_,_,_]];

        var rules = [{ cb : R0, sym : 10 , cnt : 1 },{ cb : R1, sym : 10 , cnt : 2 },{ cb : R2, sym : 11 , cnt : 2 },{ cb : R3, sym : 11 , cnt : 2 },{ cb : R4, sym : 11 , cnt : 1 },{ cb : R5, sym : 11 , cnt : 5 },{ cb : R6, sym : 12 , cnt : 1 },{ cb : R7, sym : 12 , cnt : 2 },{ cb : R8, sym : 13 , cnt : 1 },{ cb : R9, sym : 13 , cnt : 3 },{ cb : R10, sym : 14 , cnt : 1 },{ cb : R11, sym : 14 , cnt : 2 },{ cb : R12, sym : 14 , cnt : 1 },{ cb : R13, sym : 14 , cnt : 0 }];

		var entry_state = 0;

var stack = new Array<Int>();
var ret = new Array<Dynamic>();

var cur = input.pop();
var cstate = entry_state;

while(cur!=null) {
	var action = actions[cstate][cur.id];
	//trace(cstate+" "+Std.string(stack)+" # "+Std.string(cur)+" "+Std.string(action)+"  #  "+Std.string(input)+"   ~   "+Std.string(ret));
	
	switch(action) {
		case aS(id):
			ret.push(cur);
			stack.push(cstate);
			cstate = id;
			cur = input.pop();
		case aR(id):
			var c = rules[id];
			c.cb(ret);
			
			if(c.cnt>0) {
				for(i in 0...c.cnt-1) stack.pop();
				cstate = stack[stack.length-1];
			}else stack.push(cstate);
			
			var goto = actions[cstate][c.sym];
			switch(goto) { case aG(id): cstate = id; default: }
		case aA:
			break;
		case aE:
			if(cur != Terminal.ERROR) {
				//if(input.length==0) input.push(Terminal.DOLLAR);
				input.push(cur = Terminal.ERROR);
			} else {
				ret.pop();
				if(stack.length==0) break;
				cstate = stack.pop();
			}
		default:
	}
}

return if(ret.length==0) null else ret[0];	}

	private static inline function R0(ret:Array<Dynamic>) {
		//assign arguments.
		var hllr__0 = ret.pop();
		ret.push(({ [hllr__0];					  }));
	}
	private static inline function R1(ret:Array<Dynamic>) {
		//assign arguments.
		var hllr__1 = ret.pop();
		var hllr__0 = ret.pop();
		ret.push(({ var x = hllr__0; x.push(hllr__1); x; }));
	}
	private static inline function R2(ret:Array<Dynamic>) {
		//assign arguments.
		var hllr__1 = ret.pop();
		var hllr__0 = ret.pop();
		ret.push(({ h_tdecl(hllr__1);			}));
	}
	private static inline function R3(ret:Array<Dynamic>) {
		//assign arguments.
		var hllr__1 = ret.pop();
		var hllr__0 = ret.pop();
		ret.push(({ h_entry(hllr__1.data);	}));
	}
	private static inline function R4(ret:Array<Dynamic>) {
		//assign arguments.
		var hllr__0 = ret.pop();
		ret.push(({ h_extra(hllr__0.data);	}));
	}
	private static inline function R5(ret:Array<Dynamic>) {
		//assign arguments.
		var hllr__4 = ret.pop();
		var hllr__3 = ret.pop();
		var hllr__2 = ret.pop();
		var hllr__1 = ret.pop();
		var hllr__0 = ret.pop();
		ret.push(({ h_rules(hllr__1.data,hllr__3);	}));
	}
	private static inline function R6(ret:Array<Dynamic>) {
		//assign arguments.
		var hllr__0 = ret.pop();
		ret.push(({ [hllr__0.data];					   }));
	}
	private static inline function R7(ret:Array<Dynamic>) {
		//assign arguments.
		var hllr__1 = ret.pop();
		var hllr__0 = ret.pop();
		ret.push(({ var x = hllr__0; x.push(hllr__1.data); x; }));
	}
	private static inline function R8(ret:Array<Dynamic>) {
		//assign arguments.
		var hllr__0 = ret.pop();
		ret.push(({ [hllr__0];					  }));
	}
	private static inline function R9(ret:Array<Dynamic>) {
		//assign arguments.
		var hllr__2 = ret.pop();
		var hllr__1 = ret.pop();
		var hllr__0 = ret.pop();
		ret.push(({ var x = hllr__0; x.push(hllr__2); x; }));
	}
	private static inline function R10(ret:Array<Dynamic>) {
		//assign arguments.
		var hllr__0 = ret.pop();
		ret.push(({ { rule : hllr__0, haxe : null 	}; }));
	}
	private static inline function R11(ret:Array<Dynamic>) {
		//assign arguments.
		var hllr__1 = ret.pop();
		var hllr__0 = ret.pop();
		ret.push(({ { rule : hllr__0, haxe : hllr__1.data	}; }));
	}
	private static inline function R12(ret:Array<Dynamic>) {
		//assign arguments.
		var hllr__0 = ret.pop();
		ret.push(({ { rule : [], haxe : hllr__0.data  }; }));
	}
	private static inline function R13(ret:Array<Dynamic>) {
		//assign arguments.
		ret.push(({ { rule : [], haxe : null     }; }));
	}
}

class Terminal {
	public static var BAR = new Terminal(6);
	public static var COLON = new Terminal(5);
	public static var DOLLAR = new Terminal(0);
	public static var ERROR = new Terminal(1);
	public static var HAXE = new Terminal(4);
	public static var IDENT = new Terminal(2);
	public static var PERC = new Terminal(9);
	public static var SEMI = new Terminal(7);
	public static var STSYM = new Terminal(8);
	public static var TOKEN = new Terminal(3);

	public var id:Int;
	public var data:Dynamic;

	public static var cons:Array<Terminal> = null;	public static inline function initcons() {
        if(cons==null) cons = [DOLLAR,ERROR,IDENT,TOKEN,HAXE,COLON,BAR,SEMI,STSYM,PERC];
	}

	public function new(id:Int) {
		this.id = id;
	}
	public function inst(x:Dynamic) {
		var ret = new Terminal(id);
		ret.data = x;
		return ret;
	}
}

enum Action {
	aE;
	aS(n:Int);
	aR(r:Int);
	aA;
	aG(n:Int);
}