package ;

	enum Token {
		tIdent(x:String);
		tToken;
		tHaxe(x:String);
		tColon;
		tBar;
		tSemi;
		tStart;
		tPerc;
	}

	class TokenUtils {
		public static inline function index(x:Token) return Type.enumIndex(x)
	}
class HLex {
	static inline var entry_state:Int = 7;
	static var transitions:Array<Array<Array<Int>>> = null;
	public static function init() {
		if(transitions!=null) return;
		transitions = [];
var cur = [];
cur.push([89,89,20]);
cur.push([121,121,20]);
transitions.push(cur);
var cur = [];
cur.push([78,78,19]);
cur.push([110,110,19]);
transitions.push(cur);
var cur = [];
cur.push([1,41,2]);
cur.push([43,128,2]);
cur.push([42,42,3]);
transitions.push(cur);
var cur = [];
cur.push([1,41,2]);
cur.push([43,46,2]);
cur.push([48,128,2]);
cur.push([42,42,3]);
cur.push([47,47,14]);
transitions.push(cur);
var cur = [];
cur.push([1,36,4]);
cur.push([38,128,4]);
cur.push([37,37,5]);
transitions.push(cur);
var cur = [];
cur.push([1,36,4]);
cur.push([38,124,4]);
cur.push([126,128,4]);
cur.push([37,37,5]);
cur.push([125,125,18]);
transitions.push(cur);
var cur = [];
cur.push([42,42,2]);
cur.push([47,47,15]);
transitions.push(cur);
var cur = [];
cur.push([9,10,16]);
cur.push([13,13,16]);
cur.push([32,32,16]);
cur.push([37,37,24]);
cur.push([47,47,6]);
cur.push([58,58,21]);
cur.push([59,59,23]);
cur.push([65,90,17]);
cur.push([95,95,17]);
cur.push([97,122,17]);
cur.push([124,124,22]);
transitions.push(cur);
var cur = [];
cur.push([69,69,1]);
cur.push([101,101,1]);
transitions.push(cur);
var cur = [];
cur.push([75,75,8]);
cur.push([107,107,8]);
transitions.push(cur);
var cur = [];
cur.push([78,78,13]);
cur.push([110,110,13]);
transitions.push(cur);
var cur = [];
cur.push([79,79,9]);
cur.push([111,111,9]);
transitions.push(cur);
var cur = [];
cur.push([82,82,0]);
cur.push([114,114,0]);
transitions.push(cur);
var cur = [];
cur.push([84,84,12]);
cur.push([116,116,12]);
transitions.push(cur);
transitions.push(null);
var cur = [];
cur.push([1,9,15]);
cur.push([11,12,15]);
cur.push([14,128,15]);
transitions.push(cur);
var cur = [];
cur.push([9,10,16]);
cur.push([13,13,16]);
cur.push([32,32,16]);
transitions.push(cur);
var cur = [];
cur.push([48,57,17]);
cur.push([65,90,17]);
cur.push([95,95,17]);
cur.push([97,122,17]);
transitions.push(cur);
transitions.push(null);
transitions.push(null);
transitions.push(null);
transitions.push(null);
transitions.push(null);
transitions.push(null);
var cur = [];
cur.push([69,69,10]);
cur.push([101,101,10]);
cur.push([84,84,11]);
cur.push([116,116,11]);
cur.push([123,123,4]);
transitions.push(cur);
}
        static var accepting = [false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,true,true,true,true,true,true,true,true,true,true];
	public static function lexify(input:String):Array<Token> {
		init();
var ret = new Array<Token>();
var valid = false;
var valcnt = 0;
var attr = 0;
var errstate = false;
var errstr:String = null;

var state = entry_state;
var pos = 0;
var ipos = pos;

while(pos<input.length) {
	//evaluate next state to progress to.
	var trans = transitions[state];
	var char = input.charCodeAt(pos);

	state = -1;
	if(trans!=null){
		for(range in trans) {
			if(char>=range[0] && char<=range[1]) {
				state = range[2];
				break;
			}
		}
	}

	if(state==-1) {
		//ERROR?
		if(!valid) {
			if(!errstate) {
				if(errstr==null) errstr = input.charAt(ipos);
				else errstr += input.charAt(ipos);
			}else errstr += String.fromCharCode(char);
			pos = ipos + 1;
		}else {
			if(errstr!=null) {
				var tok = errtok(errstr);
				if(tok!=null) ret.push(tok);
				errstr = null;
			}
			var tok = tokenof(attr,input.substr(ipos,valcnt));
			if(tok!=null) ret.push(tok);
			pos = ipos+valcnt;
		}
		errstate = !valid;
		state = entry_state;
		valid = false;
		ipos = pos;
	}else {
		pos++;
		errstate = false;
	}

	if(accepting[state]) {
		valid = true;
		valcnt = pos-ipos;
		attr = state;
	}else if(pos==input.length) {
		if(!valid) {
			if(!errstate) {
				if(errstr==null) errstr = input.charAt(ipos);
				else errstr += input.charAt(ipos);
			}
			var tok = tokenof(attr,input.substr(ipos,valcnt));
			if(tok!=null) ret.push(tok);
			pos = ipos+valcnt;
		}
		errstate = !valid;
		state = entry_state;
		valid = false;
		ipos = pos;
	}
}

if(ipos<input.length) {
	if(!valid) ret.push(errtok(input.substr(ipos)));
	else {
		if(errstr!=null) {
			var tok = errtok(errstr);
			if(tok!=null) ret.push(tok);
			errstr = null;
		}
		var tok = tokenof(attr,input.substr(ipos,valcnt));
		if(tok!=null) ret.push(tok);
		pos = ipos+valcnt;
	}
}

if(errstr!=null) {
	var tok = errtok(errstr);
	if(tok!=null) ret.push(tok);
	errstr = null;
}

return ret;
}
	static inline function errtok(hxl_match:String):Token {
		return null;
	}
	static function tokenof(id:Int, hxl_match:String):Token {
		switch(id) {
			default: return null;
            case 17:
				return ({ tIdent( hxl_match ); });
            case 18:
				return ({ tHaxe( hxl_match .substr(2, hxl_match .length-4)); });
            case 19:
				return ({ tToken; });
            case 20:
				return ({ tStart; });
            case 21:
				return ({ tColon; });
            case 22:
				return ({ tBar;   });
            case 23:
				return ({ tSemi;  });
            case 24:
				return ({ tPerc;  });
        }
	}
}
