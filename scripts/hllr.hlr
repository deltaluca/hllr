%token IDENT TOKEN HAXE COLON
%token BAR SEMI START PERC

%{
	import HLex;
	import scx.Match;

	enum HLR {
		hDecl(tokens:Array<String>);
		hExtra(x:String);
		hEntry(x:String);
		hRules(nt:String, rules:Array<HLRule>, type:String);
	}

	typedef HLRule = {rule:Array<String>,haxe:String};
%}

%entry prog

%prog %{ Array<HLR> %}
	: state      %{ [%0]; %}
	| prog state %{ %0.push(%1); %0; %}
;

%state %{ HLR %}
	: TOKEN idents  %{ hDecl (%1); %}
	| START ident   %{ hEntry(%1); %}
	| haxe          %{ hExtra(%0); %}
	| PERC ident haxe COLON alts SEMI %{ hRules(%1,%4,%2); %}
;

%idents %{ Array<String> %}
	: ident        %{ [%0]; %}
	| idents ident %{ %0.push(%1); %0; %}
;

%alts %{ Array<HLRule> %}
	: alt          %{ [%0]; %}
	| alts BAR alt %{ %0.push(%2); %0; %}
;

%alt %{ HLRule %}
	: idents      %{ { rule: %0, haxe: null }; %}
	| idents haxe %{ { rule: %0, haxe: %1   }; %}
	|        haxe %{ { rule: [], haxe: %0   }; %}
	|             %{ { rule: [], haxe: null }; %}
;

%ident %{ String %} : IDENT %{ Match.match(%0,tIdent(x)=x); %} ;
%haxe  %{ String %} : HAXE  %{ Match.match(%0,tHaxe (x)=x); %} ;
